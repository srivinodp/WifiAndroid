WifiManager: 
This class is used to manage the WiFi connectivity of the device. 
It provides methods to scan for available WiFi networks, connect to a WiFi network, and get information about the current WiFi connection.

WifiConfiguration:
This class represents the configuration information for a WiFi network. 
It includes information such as the network name, security settings, and password.

WifiInfo:
This class provides information about the current WiFi connection, such as the network name, signal strength, and IP address.

ScanResult: 
This class represents the information about a WiFi network that was discovered during a scan.
It includes information such as the network name, signal strength, and security settings.

WifiStateReceiver: 
This class is used to receive broadcast messages related to WiFi connectivity, such as when the device connects or disconnects from a WiFi network.

WifiP2pManager: 
This class provides APIs for creating and managing WiFi Direct connections between devices.

WifiDirectDevice:
This class represents a device that is available for WiFi Direct connections.

WifiDirectGroup: 
This class represents a group of devices that are connected using WiFi Direct.

WifiDirectService: 
This class represents a service that is available for discovery over a WiFi Direct connection.

WifiDirectServiceRequest: 
This class represents a request for discovering services over a WiFi Direct connection.

There are a few more classes related to WiFi in Android:

WifiP2pManager: This class provides the API for managing Wi-Fi Direct connectivity.
WifiAwareManager: This class provides the API for managing Wi-Fi Aware connectivity.
WifiScanner: This class provides the API for scanning for Wi-Fi access points.
WifiEnterpriseConfig: This class provides the configuration for enterprise Wi-Fi networks.
WifiNetworkSpecifier: This class specifies a Wi-Fi network to connect to.
WifiInfo: This class provides information about the current Wi-Fi connection.
WifiManager.LocalOnlyHotspotReservation: This class represents a local-only Wi-Fi hotspot reservation.
WifiManager.LocalOnlyHotspotCallback: This class provides callbacks for local-only Wi-Fi hotspot creation.
WifiManager.WifiLock: This class provides a mechanism for applications to request a Wi-Fi lock to keep the Wi-Fi radio awake.
ScanResult: This class represents the results of a Wi-Fi access point scan.
WifiConfiguration: This class represents a Wi-Fi network configuration.

------------------------------------------------------
WifiManager class - 
getWifiState(): This method returns the current state of the Wi-Fi connection. Possible return values include WifiManager.WIFI_STATE_DISABLED, WifiManager.WIFI_STATE_ENABLED, and WifiManager.WIFI_STATE_ENABLING.

isWifiEnabled(): This method returns a boolean indicating whether Wi-Fi is currently enabled.

setWifiEnabled(boolean enabled): This method can be used to enable or disable Wi-Fi programmatically.

getConnectionInfo(): This method returns an instance of the WifiInfo class, which contains information about the current Wi-Fi connection.

startScan(): This method starts a Wi-Fi scan to look for available Wi-Fi networks.

getScanResults(): This method returns a list of ScanResult objects, each of which represents a Wi-Fi network that was detected during the most recent scan.

getWifiState() and isWifiEnabled() can be used to determine whether Wi-Fi is currently enabled, and setWifiEnabled() can be used to enable or disable Wi-Fi programmatically.

addNetwork() and enableNetwork() can be used to add a new Wi-Fi network to the device and connect to it.

disconnect(): This method can be used to disconnect the device from the current Wi-Fi network.

getConfiguredNetworks(): This method returns a list of all Wi-Fi networks that have been saved to the device.

removeNetwork(): This method can be used to remove a saved Wi-Fi network from the device.

reconnect(): This method can be used to reconnect to the currently connected Wi-Fi network.

-------------------------------------

WifiConfiguration class - 

public int networkId: Returns the unique network identifier for this configuration.
public String SSID: Gets the SSID (name) of the Wi-Fi network associated with this configuration.
public int status: Gets the status of the Wi-Fi network associated with this configuration. Possible values are: DISABLED, ENABLED, and CURRENT.
public int priority: Gets the priority of this configuration.
public String toString(): Returns a string representation of the configuration.
public void allowAutojoin(boolean allow): Sets whether this network should be allowed to connect automatically.
public void setProxySettings(ProxySettings settings): Sets the proxy settings for this configuration.
public void setIpAssignment(IpAssignment assign) : Sets the IP assignment type for this configuration.

------------------------------------

WifiInfo class - 

getBSSID(): Returns the basic service set identifier (BSSID) of the current access point.
getIpAddress(): Returns the IP address of the current Wi-Fi connection.
getLinkSpeed(): Returns the link speed of the current Wi-Fi connection in Mbps.
getMacAddress(): Returns the MAC address of the Wi-Fi interface.
getNetworkId(): Returns the network ID of the current Wi-Fi connection.
getRssi(): Returns the received signal strength indicator (RSSI) of the current Wi-Fi connection in dBm.
getSSID(): Returns the service set identifier (SSID) of the current Wi-Fi connection.
getSupplicantState(): Returns the supplicant state of the current Wi-Fi connection.

-------------------------------------

ScanResult class - 

SSID: Returns the network name (SSID) of the Wi-Fi access point as a string.
BSSID: Returns the basic service set identifier (BSSID) of the access point as a string.
frequency: Returns the frequency of the channel over which the client is communicating with the access point, in MHz.
level: Returns the received signal strength indicator (RSSI) of the access point in dBm.
capabilities: Returns the security capabilities of the access point as a string.
toString(): Returns a string representation of the ScanResult object.
In addition to these methods, ScanResult also has various getter and setter methods for its properties, such as getSSID(), setSSID(), getBSSID(), setBSSID(), etc.
